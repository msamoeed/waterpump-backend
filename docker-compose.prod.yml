version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: waterpump-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-waterpump}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - "${POSTGRES_PORT:-5436}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - waterpump-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: waterpump-redis-prod
    ports:
      - "${REDIS_PORT:-6380}:6379"
    volumes:
      - redis_data:/data
    networks:
      - waterpump-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # InfluxDB 3.3 Core Time Series Database
  influxdb:
    image: influxdb:3.3-core
    container_name: waterpump-influxdb-prod
    command: >
      influxdb3
      serve
      --node-id=node0
      --object-store=file
      --data-dir=/var/lib/influxdb3/data
      --plugin-dir=/var/lib/influxdb3/plugins
      --without-auth
    ports:
      - "${INFLUXDB_PORT:-8087}:8181"
    volumes:
      - influxdb_data:/var/lib/influxdb3
    networks:
      - waterpump-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Nest.js Backend API
  api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: waterpump-api-prod
    environment:
      NODE_ENV: production
      PORT: 3000
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      ONESIGNAL_REST_API_KEY: ${ONESIGNAL_REST_API_KEY:-}
      POSTGRES_DB: ${POSTGRES_DB:-waterpump}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      INFLUXDB_URL: http://influxdb:8181
      INFLUXDB_TOKEN: dummy-token-for-no-auth-mode
      INFLUXDB_ORG: 
      INFLUXDB_BUCKET: waterpump
      NODE_OPTIONS: "--max-old-space-size=1536 --max-semi-space-size=256 --optimize-for-size"
    ports:
      - "${API_PORT:-3002}:3000"
    depends_on:
      - postgres
      - redis
      - influxdb
    networks:
      - waterpump-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: waterpump-nginx-prod
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    networks:
      - waterpump-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

volumes:
  postgres_data:
  redis_data:
  influxdb_data:

networks:
  waterpump-network:
    driver: bridge 